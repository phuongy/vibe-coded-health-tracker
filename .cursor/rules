# Cursor Rules for Health Tracker Project

## Project Overview
This is a health tracking application built with Remix, React, TypeScript, and shadcn/ui components. The project uses Tailwind CSS for styling, follows modern React patterns with Feature-Sliced Design (FSD) architecture and Atomic Design principles, and includes full internationalization (i18n) support. The app is configured for deployment on Netlify.

## Technology Stack
- **Framework**: Remix with Vite
- **Language**: TypeScript (strict mode)
- **Styling**: Tailwind CSS with shadcn/ui components
- **Icons**: Lucide React
- **Theme**: Dark/light mode with next-themes
- **Internationalization**: react-i18next with language detection
- **Forms**: react-hook-form with zod validation
- **UI Components**: Radix UI primitives with shadcn/ui
- **Package Manager**: pnpm
- **Navigation**: React Router with active link highlighting
- **Linting**: ESLint with TypeScript support
- **Build Tool**: Vite with Remix integration
- **Deployment**: Netlify with automatic builds and CDN

## Code Style & Conventions

### React Import Style
- **ALWAYS use namespace imports**: `import * as React from "react"` - This is MANDATORY
- **NEVER use default imports**: Don't use `import React from "react"`
- **NEVER use destructured imports**: Don't use `import { useState, useEffect } from "react"`
- **ALWAYS use React namespace**: Access hooks as `React.useState`, `React.useEffect`, `React.useCallback`, etc.
- **Remove unused imports**: Only import React when actually using React hooks or JSX
- **Consistent pattern**: Every file that uses React hooks MUST follow this pattern
- **No exceptions**: This rule applies to ALL React components and hooks usage

### File Organization
- Use `@/` alias for imports from the app directory (configured in tsconfig.json)
- Follow Feature-Sliced Design (FSD) architecture:
  - **app**: `app/` - Application configuration, providers, routing, i18n setup
  - **pages**: `app/routes/` - Page components and routing
  - **widgets**: `components/widgets/` - Self-contained page sections
  - **features**: `features/` - Business logic and user interactions
  - **entities**: `entities/` - Business entities and their logic
  - **shared**: `shared/` - Reusable utilities, UI components, types, i18n config
- Follow Atomic Design principles for component organization within shared:
  - **Atoms**: `shared/ui/atoms/` - Basic building blocks (Button, Card, Switch, Input, Select, Dialog, Form, Label)
  - **Molecules**: `shared/ui/molecules/` - Simple combinations (ThemeToggle, LanguageSwitcher)
  - **Organisms**: `shared/ui/organisms/` - Complex UI sections
- Each UI component lives in its own directory with the component file named after the component
- shadcn/ui components go in `shared/ui/atoms/`
- Utilities go in `shared/lib/`
- API functions go in `shared/lib/api.ts`
- i18n configuration goes in `shared/lib/i18n.ts`
- Theme provider goes in `shared/provider/theme-provider.tsx`

### Import Patterns
- **Always use `@/` alias**: Never use `~` for imports
- **Direct imports**: Import directly from component files, not index files
- **Component imports**: `@/shared/ui/atoms/button/button`
- **Widget imports**: `@/components/widgets/health-stats`
- **Feature imports**: `@/features/dashboard`
- **Entity imports**: `@/entities/user`
- **Utility imports**: `@/shared/lib/utils`
- **API imports**: `@/shared/lib/api`
- **i18n imports**: `@/shared/lib/i18n`
- **App components**: `@/app/components/app-header`, `@/app/components/app-footer`
- **Provider imports**: `@/shared/provider/theme-provider`, `@/shared/provider/toast-provider`, `@/shared/provider/dialog-provider`

### Import Order
1. React and external libraries
2. Internal components and utilities (using @/ alias)
3. Relative imports
4. Type imports
5. **ESLint enforced**: Use `pnpm lint --fix` to auto-fix import order

### FSD Import Rules
- **Dependency Direction**: Higher layers can import from lower layers
  - app → pages → widgets → features → entities → shared
- **No Circular Dependencies**: Lower layers cannot import from higher layers
- **No Index Files**: Import directly from component files
- **Absolute Imports**: Use `@/` alias for cross-slice imports
- **Valid Exports**: Only export files that actually exist

### Component Guidelines
- Use functional components with TypeScript
- Prefer shadcn/ui components over custom implementations
- Use proper TypeScript types and interfaces
- Follow React hooks best practices
- Use proper accessibility attributes
- Each component should be in its own directory with descriptive filename
- **MANDATORY**: Always use `import * as React from "react"` pattern when using React hooks
- **MANDATORY**: Access all hooks via React namespace: `React.useState`, `React.useEffect`, etc.
- **NEVER**: Use destructured imports like `import { useState } from "react"`
- Remove unused React imports from components that don't use hooks
- Extract repeated classnames into helper functions for maintainability
- **Action Buttons**: Use shadcn Button component with appropriate variants (secondary for edit buttons)

### Internationalization (i18n)
- **Always use translation keys**: Never hardcode strings in components
- **Use useTranslation hook**: `const { t } = useTranslation()`
- **Translation keys**: Use descriptive, nested keys (e.g., `t("dashboard.title")`)
- **Translation files**: All translations in `shared/lib/i18n.ts`
- **Supported languages**: English (en), Spanish (es), French (fr)
- **Language detection**: Automatic with localStorage fallback, defaults to English
- **Error messages**: All error messages must be translatable
- **Units and values**: All units and health metrics must be translatable
- **Language selector**: Located in footer, no flag emojis
- **Hook dependencies**: Include `t` in useEffect dependency arrays when used inside effects

### API Patterns
- **Mock API functions**: Use `shared/lib/api.ts` for mock data
- **Error handling**: All API errors must be translatable
- **Loading states**: Implement proper loading states for all API calls
- **Error states**: Implement proper error states with translated messages
- **API error constants**: Use `API_ERRORS` object for consistent error messages
- **Simulated delays**: Use realistic network delays for better UX

### Form Handling
- **react-hook-form**: Use for form state management
- **zod validation**: Use for form validation schemas
- **Translated validation**: All validation messages must be translatable
- **Proper error handling**: Handle form submission errors gracefully
- **Loading states**: Show loading states during form submission
- **Default values**: Support pre-selected values for forms (e.g., stat types)

### Styling Guidelines
- Use Tailwind CSS classes
- Prefer CSS variables for theming (already configured)
- Use shadcn/ui design tokens
- Support both light and dark themes
- Use responsive design patterns
- Use proper color contrast ratios
- Extract repeated classnames into helper functions
- Use nullish coalescing (`??`) instead of logical OR (`||`) for fallback values

### TypeScript Best Practices
- Use strict TypeScript configuration
- Define proper interfaces for props
- Use proper type annotations
- Avoid `any` types
- Use proper generic types where needed
- Use proper type inference where possible
- Fix all TypeScript errors before committing

## Component Patterns

### Feature-Sliced Design (FSD) Architecture
- **app**: Application layer
  - Configuration, providers, routing setup
  - Global styles and theme providers
  - App-wide state management
  - i18n initialization and configuration
  - Global components: AppHeader, AppFooter
- **pages**: Page components
  - Route components with page-specific logic
  - Data fetching and page-level state
  - Composition of widgets and features
  - Dashboard as initial page (`/dashboard`)
  - Stat type pages: `/weight`, `/heart-rate`, `/sleep`, `/steps`
  - Edit functionality with modal dialogs using custom hooks
- **widgets**: Self-contained page sections
  - Complex UI components that combine features
  - Page-specific business logic
  - Reusable across different pages
  - API data fetching and state management
- **features**: Business logic and user interactions
  - User actions and business processes
  - Feature-specific state management
  - API calls and data transformations
  - Form handling and validation
  - AddEntryDialog with pre-selected stat types (uses dialog context)
  - EditEntryModal with pre-populated data and disabled stat type (uses dialog context)
  - Direct dialog context integration (no intermediate hooks)
- **entities**: Business entities
  - Data models and business logic
  - Entity-specific operations
  - Domain-driven design principles
- **shared**: Reusable utilities and components
  - UI components, utilities, types
  - No business logic, pure functionality
  - Framework-agnostic code
  - i18n configuration and API utilities

### Atomic Design Principles (within shared/ui)
- **Atoms**: Smallest functional units
  - `shared/ui/atoms/button/button.tsx` - Basic button component
  - `shared/ui/atoms/card/card.tsx` - Basic card component
  - `shared/ui/atoms/switch/switch.tsx` - Basic switch component
  - `shared/ui/atoms/input/input.tsx` - Basic input component
  - `shared/ui/atoms/select/select.tsx` - Basic select component
  - `shared/ui/atoms/dialog/dialog.tsx` - Basic dialog component
  - `shared/ui/atoms/form/form.tsx` - Form components with react-hook-form
  - `shared/ui/atoms/label/label.tsx` - Basic label component
  - `shared/ui/atoms/toast/toast.tsx` - Toast notification component
  - `shared/ui/atoms/modal/modal.tsx` - Modal dialog component
  - Should be highly reusable and configurable
  - Minimal business logic
  - Focus on presentation and interaction
- **Molecules**: Simple combinations of atoms
  - `shared/ui/molecules/theme-toggle/theme-toggle.tsx` - Combines Switch + Icons
  - `shared/ui/molecules/language-switcher/language-switcher.tsx` - Language selection (no flag emojis)
  - Combine 2-3 atoms with simple logic
  - Handle basic state and interactions
  - Still reusable across different contexts
- **Organisms**: Complex UI sections
  - Combine multiple molecules and atoms
  - Handle complex state and business logic
  - Specific to particular use cases

### Component Directory Structure
```
shared/ui/
├── atoms/
│   ├── button/
│   │   └── button.tsx
│   ├── card/
│   │   └── card.tsx
│   ├── switch/
│   │   └── switch.tsx
│   ├── input/
│   │   └── input.tsx
│   ├── select/
│   │   └── select.tsx
│   ├── dialog/
│   │   └── dialog.tsx
│   ├── form/
│   │   └── form.tsx
│   └── label/
│       └── label.tsx
├── molecules/
│   ├── theme-toggle/
│   │   └── theme-toggle.tsx
│   └── language-switcher/
│       └── language-switcher.tsx
└── organisms/
    └── (future complex components)
```

### App Components (shared/ui/molecules)
- **AppHeader**: Global navigation header with active link highlighting
  - Location: `shared/ui/molecules/app-header/app-header.tsx`
  - Dashboard title link
  - Stat type navigation links (Weight, Heart Rate, Sleep, Steps)
  - Theme toggle
  - Add entry modal trigger
  - Active link highlighting with background accent
  - Extracted classname helper functions for maintainability
- **AppFooter**: Global footer with language switcher
  - Location: `shared/ui/molecules/app-footer/app-footer.tsx`
  - Centered language switcher
  - Border-top styling
  - Consistent across all pages
- **HealthStatsWidget**: Dashboard health statistics widget
  - Location: `shared/ui/molecules/health-stats/health-stats.tsx`
  - Displays health metrics and statistics
  - Reusable across different pages
- **ToastProvider**: Global context provider for toast notifications
  - Wraps entire app in root.tsx
  - Provides showToast/hideToast functions
  - Renders toasts at root level with proper z-index
- **DialogProvider**: Global context provider for modal dialogs
  - Wraps entire app in root.tsx
  - Provides showDialog/hideDialog functions
  - Renders dialogs at root level with proper z-index
  - Handles accessibility and keyboard navigation

### Navigation Patterns
- **Active Link Highlighting**: Use `useLocation` hook for current path detection
- **Extracted Classnames**: Use helper functions for navigation link styling
- **Dashboard as Home**: Dashboard is the initial page, no separate home page
- **Stat Type Pages**: Each stat type has its own dedicated page
- **Consistent Layout**: All pages include AppHeader and AppFooter

### shadcn/ui Components
- Always use shadcn/ui components when available
- Follow the established component patterns
- Use proper variants and sizes
- Maintain accessibility standards
- Place in appropriate atomic design layer
- Use Radix UI primitives as base

### Theme Integration
- Use CSS variables for colors
- Support dark/light mode switching
- Use proper contrast ratios
- Test both themes
- ThemeToggle component handles theme switching
- LanguageSwitcher component handles language switching

### UI Context Management
- **ToastProvider**: Global context for toast notifications
- **DialogProvider**: Global context for modal dialogs
- **useToast Hook**: Access toast context functions from any component
- **useDialog Hook**: Access dialog context functions from any component
- **showDialog/showToast**: Functions to display UI elements at root level
- **hideDialog/hideToast**: Functions to hide UI elements
- **Root Level Rendering**: Toasters and dialogs render at app root for proper z-index
- **Component Type Pattern**: Dialog context expects component types, not React elements
- **Accessibility**: Proper ARIA labels and keyboard navigation support

### Form Handling
- Use react-hook-form for form state
- Use zod for validation schemas
- Use proper form validation with translated messages
- Follow Remix form patterns
- Use proper error handling
- Implement proper loading states
- Support pre-selected values (e.g., default stat type in AddEntryDialog)
- **Edit Forms**: Pre-populated with existing data, stat type disabled
- **Form Validation**: Same validation rules for add and edit forms
- **Action Buttons**: "Add" for new entries, "Save" for editing existing entries

### React Hooks Usage Patterns
- **MANDATORY**: Always use `React.useState` instead of `useState`
- **MANDATORY**: Always use `React.useEffect` instead of `useEffect`
- **MANDATORY**: Always use `React.useCallback` instead of `useCallback`
- **MANDATORY**: Always use `React.useMemo` instead of `useMemo`
- **MANDATORY**: Always use `React.useRef` instead of `useRef`
- **MANDATORY**: Always use `React.useContext` instead of `useContext`
- **MANDATORY**: Always use `React.useReducer` instead of `useReducer`
- **MANDATORY**: Always use `React.useLayoutEffect` instead of `useLayoutEffect`
- **MANDATORY**: Always use `React.useImperativeHandle` instead of `useImperativeHandle`
- **MANDATORY**: Always use `React.useDebugValue` instead of `useDebugValue`
- **Pattern**: `React.[hookName]` for ALL React hooks
- **No exceptions**: This applies to ALL React hooks, not just useState

## File Naming Conventions
- Use kebab-case for file names
- Use PascalCase for component names
- Use camelCase for functions and variables
- Use UPPER_SNAKE_CASE for constants
- Component files should be named after the component (e.g., `button.tsx`, `card.tsx`)
- Never use `index.tsx` for component files

## Code Quality
- Write self-documenting code
- Use meaningful variable and function names
- Add proper JSDoc comments for complex functions
- Follow DRY principles
- Keep components focused and single-purpose
- Use direct imports instead of index files
- **MANDATORY**: Always use `import * as React from "react"` when using React hooks
- **MANDATORY**: Access all React hooks via React namespace (React.useState, React.useEffect, etc.)
- **NEVER**: Use destructured React imports like `import { useState, useEffect } from "react"`
- Extract repeated classnames into helper functions
- Use nullish coalescing (`??`) for fallback values
- Fix all linting errors before committing
- Run `pnpm lint --fix` to auto-fix import order issues
- **React Import Compliance**: Ensure all React imports follow the namespace pattern

## Performance Considerations
- Use proper React optimization techniques
- Implement proper loading states
- Use proper error boundaries
- Optimize bundle size
- Use proper caching strategies
- Implement proper HMR configuration

## Accessibility
- Use proper semantic HTML
- Implement proper ARIA attributes
- Ensure keyboard navigation
- Maintain proper color contrast
- Test with screen readers
- Support multiple languages

## Testing Guidelines
- Write unit tests for utilities
- Write integration tests for components
- Test both light and dark themes
- Test accessibility features
- Test internationalization
- Use proper testing patterns

## Git Workflow
- Use conventional commit messages
- Keep commits focused and atomic
- Write descriptive commit messages
- Use proper branching strategies
- Fix all build errors before committing

## Security
- Validate all user inputs
- Use proper authentication patterns
- Implement proper authorization
- Follow security best practices
- Sanitize data appropriately

## Documentation
- Document complex business logic
- Keep README up to date
- Document component APIs
- Use proper inline comments
- Maintain code examples
- Document i18n patterns

## Error Handling
- Use proper error boundaries
- Implement proper error states
- Use proper logging
- Handle edge cases gracefully
- Provide user-friendly error messages
- All error messages must be translatable

## Performance Monitoring
- Monitor bundle size
- Track performance metrics
- Optimize loading times
- Use proper caching
- Monitor user experience
- Monitor i18n performance

## Internationalization Best Practices
- Never hardcode strings in components
- Use descriptive translation keys
- Group related translations logically
- Support RTL languages if needed
- Test with different languages
- Use proper number and date formatting
- Handle pluralization correctly
- Default to English language
- No flag emojis in language selector
- Include translation function in useEffect dependencies when used

## API Development Patterns
- Use consistent error message patterns
- Implement proper loading states
- Use realistic network delays
- Handle errors gracefully
- Provide fallback data
- Use proper TypeScript interfaces

## Navigation and Routing
- Dashboard as initial page (`/dashboard`)
- Stat type pages: `/weight`, `/heart-rate`, `/sleep`, `/steps`
- Active link highlighting with background accent
- Extracted classname helper functions
- Consistent header and footer across all pages
- No separate home page or home link

## Build and Development
- **Build Command**: `pnpm build` - Builds for production (sourcemap warnings suppressed)
- **Type Check**: `pnpm typecheck` - Runs TypeScript compiler
- **Lint**: `pnpm lint` - Runs ESLint with TypeScript support
- **Lint Fix**: `pnpm lint --fix` - Auto-fixes import order and other issues
- **Development**: `pnpm dev` - Starts development server
- **Fix Build Errors**: Always run typecheck and lint before committing
- **Import Order**: ESLint enforces proper import ordering
- **Unused Imports**: Remove unused React imports from components
- **Sourcemap Warnings**: Suppressed in production build via Vite config
- **Deployment**: Configured for Netlify with netlify.toml and proper redirects
- **React Import Compliance**: ESLint will catch incorrect React import patterns
- **Hook Usage Verification**: Ensure all React hooks use `React.[hookName]` pattern

## Deployment Configuration

### Netlify Setup
- **Configuration File**: `netlify.toml` - Build settings and redirects
- **Node Version**: `.nvmrc` specifies Node.js 20
- **Build Command**: `pnpm build`
- **Publish Directory**: `build/client`
- **Entry Point**: `public/index.html` - Template copied to build/client/index.html
- **SPA Redirects**: Configured for client-side routing
- **Security Headers**: Added for better security
- **Asset Caching**: Optimized for performance

### Deployment Process
1. **Git Integration**: Connect repository to Netlify for automatic deployments
2. **Build Process**: Netlify runs `pnpm build` on every push
3. **Asset Optimization**: Vite optimizes and bundles all assets
4. **CDN Distribution**: Netlify serves assets from global CDN
5. **HTTPS**: Automatic SSL certificates
6. **Custom Domains**: Easy domain configuration

### Environment Configuration
- **No Required Variables**: App works with mock data out of the box
- **Optional Variables**: Can be added for real API integration
- **Build Environment**: Node.js 20 with pnpm package manager

## Common Issues and Solutions
- **TypeScript Errors**: Run `pnpm typecheck` to identify and fix type errors
- **Import Order**: Run `pnpm lint --fix` to auto-fix import order issues
- **Unused Imports**: Remove unused React imports when not using hooks
- **Hook Dependencies**: Include all dependencies in useEffect dependency arrays
- **Broken Exports**: Only export files that actually exist
- **Next-themes Import**: Use proper import syntax for next-themes types
- **i18next Import**: Use `createInstance` instead of default import to avoid warnings
- **Build Failures**: Check Node.js version and pnpm installation
- **Deployment Issues**: Verify netlify.toml configuration and build output
- **React Import Errors**: ALWAYS use `import * as React from "react"` and access hooks via `React.useState`, `React.useEffect`, etc.
- **Destructured React Imports**: NEVER use `import { useState } from "react"` - this is FORBIDDEN
- **React Hook Usage**: ALL React hooks must be accessed via React namespace

## Future Considerations
- Plan for scalability
- Consider additional languages
- Plan for mobile optimization
- Consider offline capabilities
- Plan for data persistence
- Consider real API integration
- Plan for user authentication
- Consider data visualization
- Implement real charts on stat pages
- Add CRUD functionality for health entries
- Consider adding unit tests
- Plan for CI/CD pipeline
- Add real-time data synchronization
- Implement user accounts and data persistence
- Add data export/import functionality
- Consider PWA capabilities
- Plan for mobile app development
